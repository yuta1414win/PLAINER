'use client';

import { useState, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from '@/components/ui/dialog';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import {
  Trash2,
  Edit,
  Plus,
  Variable as VariableIcon,
  Eye,
  EyeOff,
} from 'lucide-react';
import { useEditorStore } from '@/lib/store';
import { createVariable, VariableProcessor } from '@/lib/variables';
import type { Variable } from '@/lib/types';

interface VariableManagerProps {
  isOpen: boolean;
  onClose: () => void;
}

export function VariableManager({ isOpen, onClose }: VariableManagerProps) {
  const { project, updateProject } = useEditorStore();
  const [editingVariable, setEditingVariable] = useState<Variable | null>(null);
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [newVariable, setNewVariable] = useState<Partial<Variable>>({
    name: '',
    type: 'text',
    defaultValue: '',
    description: '',
  });
  const [previewMode, setPreviewMode] = useState(false);

  const variables = project?.variables || [];
  const variableInstances = project?.variableInstances || [];
  const processor = project ? new VariableProcessor(project) : null;

  const handleCreateVariable = useCallback(() => {
    if (!project || !newVariable.name) return;

    const variable = createVariable(
      newVariable.name,
      newVariable.type as Variable['type'],
      newVariable.defaultValue,
      newVariable.description
    );

    updateProject({
      variables: [...variables, variable],
    });

    setNewVariable({
      name: '',
      type: 'text',
      defaultValue: '',
      description: '',
    });
    setIsCreateDialogOpen(false);
  }, [project, newVariable, variables, updateProject]);

  const handleUpdateVariable = useCallback(
    (variable: Variable) => {
      if (!project) return;

      const updatedVariables = variables.map((v) =>
        v.id === variable.id ? variable : v
      );

      updateProject({ variables: updatedVariables });
      setEditingVariable(null);
    },
    [project, variables, updateProject]
  );

  const handleDeleteVariable = useCallback(
    (variableId: string) => {
      if (!project) return;

      const updatedVariables = variables.filter((v) => v.id !== variableId);
      const updatedInstances = variableInstances.filter(
        (i) => i.variableId !== variableId
      );

      updateProject({
        variables: updatedVariables,
        variableInstances: updatedInstances,
      });
    },
    [project, variables, variableInstances, updateProject]
  );

  const handleSetVariableValue = useCallback(
    (variableName: string, value: string) => {
      if (!project || !processor) return;

      processor.setVariableValue(variableName, value);
      updateProject({
        variableInstances: processor.getInstances(),
      });
    },
    [project, processor, updateProject]
  );

  const getVariableValue = useCallback(
    (variable: Variable): string => {
      if (!processor) return variable.defaultValue || '';
      return (
        processor.getVariableValue(variable.name) || variable.defaultValue || ''
      );
    },
    [processor]
  );

  const getVariableReferences = useCallback(
    (variableName: string): number => {
      if (!project) return 0;

      let count = 0;
      project.steps.forEach((step) => {
        if (step.title.includes(`{{${variableName}}}`)) count++;
        if (step.description?.includes(`{{${variableName}}}`)) count++;

        step.annotations.forEach((annotation) => {
          if (annotation.text.includes(`{{${variableName}}}`)) count++;
        });

        step.hotspots.forEach((hotspot) => {
          if (hotspot.label?.includes(`{{${variableName}}}`)) count++;
          if (hotspot.tooltipText?.includes(`{{${variableName}}}`)) count++;
        });

        if (step.cta?.label.includes(`{{${variableName}}}`)) count++;
        if (step.cta?.url.includes(`{{${variableName}}}`)) count++;
      });

      return count;
    },
    [project]
  );

  const validation = processor
    ? processor.validateProject(project!)
    : { isValid: true, errors: [] };

  if (!project) return null;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[80vh] overflow-hidden flex flex-col">
        <DialogHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <VariableIcon className="h-5 w-5" />
              <DialogTitle>Variable Manager</DialogTitle>
            </div>
            <div className="flex items-center gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => setPreviewMode(!previewMode)}
              >
                {previewMode ? (
                  <>
                    <EyeOff className="h-4 w-4 mr-2" />
                    Edit Mode
                  </>
                ) : (
                  <>
                    <Eye className="h-4 w-4 mr-2" />
                    Preview Mode
                  </>
                )}
              </Button>
              <Button onClick={() => setIsCreateDialogOpen(true)}>
                <Plus className="h-4 w-4 mr-2" />
                Add Variable
              </Button>
            </div>
          </div>
        </DialogHeader>

        <div className="flex-1 overflow-y-auto space-y-4">
          {!validation.isValid && (
            <Card className="border-red-200 bg-red-50">
              <CardHeader>
                <CardTitle className="text-red-800">
                  Validation Errors
                </CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="space-y-1">
                  {validation.errors.map((error, index) => (
                    <li key={index} className="text-sm text-red-700">
                      {error}
                    </li>
                  ))}
                </ul>
              </CardContent>
            </Card>
          )}

          {variables.length === 0 ? (
            <Card>
              <CardContent className="py-8">
                <div className="text-center text-gray-500">
                  <VariableIcon className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <p>No variables defined yet.</p>
                  <p className="text-sm mt-2">
                    Variables allow you to create dynamic content that can be
                    customized for different audiences.
                  </p>
                </div>
              </CardContent>
            </Card>
          ) : (
            <div className="space-y-3">
              {variables.map((variable) => {
                const references = getVariableReferences(variable.name);
                const currentValue = getVariableValue(variable);

                return (
                  <Card key={variable.id} className="relative">
                    <CardHeader className="pb-3">
                      <div className="flex items-start justify-between">
                        <div>
                          <CardTitle className="flex items-center gap-2">
                            <code className="text-sm bg-gray-100 px-2 py-1 rounded">
                              {`{{${variable.name}}}`}
                            </code>
                            <Badge
                              variant={
                                variable.type === 'text'
                                  ? 'default'
                                  : 'secondary'
                              }
                            >
                              {variable.type}
                            </Badge>
                          </CardTitle>
                          {variable.description && (
                            <CardDescription className="mt-2">
                              {variable.description}
                            </CardDescription>
                          )}
                        </div>
                        <div className="flex items-center gap-1">
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => setEditingVariable(variable)}
                          >
                            <Edit className="h-4 w-4" />
                          </Button>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => handleDeleteVariable(variable.id)}
                          >
                            <Trash2 className="h-4 w-4 text-red-500" />
                          </Button>
                        </div>
                      </div>
                    </CardHeader>

                    <CardContent className="pt-0">
                      <div className="space-y-3">
                        <div>
                          <label className="text-sm font-medium mb-2 block">
                            Current Value {previewMode && '(Preview)'}
                          </label>
                          <Input
                            value={currentValue}
                            onChange={(e) =>
                              handleSetVariableValue(
                                variable.name,
                                e.target.value
                              )
                            }
                            placeholder={
                              variable.defaultValue || 'Enter value...'
                            }
                            disabled={previewMode}
                          />
                        </div>

                        <div className="flex items-center justify-between text-sm text-gray-600">
                          <div>
                            Default:{' '}
                            <code>{variable.defaultValue || 'None'}</code>
                          </div>
                          <div>
                            Used in {references} place
                            {references !== 1 ? 's' : ''}
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                );
              })}
            </div>
          )}
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={onClose}>
            Close
          </Button>
        </DialogFooter>
      </DialogContent>

      {/* Create Variable Dialog */}
      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Create New Variable</DialogTitle>
          </DialogHeader>

          <div className="space-y-4">
            <div>
              <label className="text-sm font-medium mb-2 block">
                Variable Name
              </label>
              <Input
                value={newVariable.name || ''}
                onChange={(e) =>
                  setNewVariable({ ...newVariable, name: e.target.value })
                }
                placeholder="e.g., userName"
              />
            </div>

            <div>
              <label className="text-sm font-medium mb-2 block">Type</label>
              <Select
                value={newVariable.type}
                onValueChange={(value: Variable['type']) =>
                  setNewVariable({ ...newVariable, type: value })
                }
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="text">Text</SelectItem>
                  <SelectItem value="number">Number</SelectItem>
                  <SelectItem value="url">URL</SelectItem>
                  <SelectItem value="image">Image</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="text-sm font-medium mb-2 block">
                Default Value
              </label>
              <Input
                value={newVariable.defaultValue || ''}
                onChange={(e) =>
                  setNewVariable({
                    ...newVariable,
                    defaultValue: e.target.value,
                  })
                }
                placeholder="Default value..."
              />
            </div>

            <div>
              <label className="text-sm font-medium mb-2 block">
                Description
              </label>
              <Input
                value={newVariable.description || ''}
                onChange={(e) =>
                  setNewVariable({
                    ...newVariable,
                    description: e.target.value,
                  })
                }
                placeholder="Describe what this variable is used for..."
              />
            </div>
          </div>

          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setIsCreateDialogOpen(false)}
            >
              Cancel
            </Button>
            <Button onClick={handleCreateVariable} disabled={!newVariable.name}>
              Create Variable
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Edit Variable Dialog */}
      {editingVariable && (
        <Dialog open={true} onOpenChange={() => setEditingVariable(null)}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Edit Variable</DialogTitle>
            </DialogHeader>

            <div className="space-y-4">
              <div>
                <label className="text-sm font-medium mb-2 block">
                  Variable Name
                </label>
                <Input
                  value={editingVariable.name}
                  onChange={(e) =>
                    setEditingVariable({
                      ...editingVariable,
                      name: e.target.value,
                    })
                  }
                />
              </div>

              <div>
                <label className="text-sm font-medium mb-2 block">Type</label>
                <Select
                  value={editingVariable.type}
                  onValueChange={(value: Variable['type']) =>
                    setEditingVariable({ ...editingVariable, type: value })
                  }
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="text">Text</SelectItem>
                    <SelectItem value="number">Number</SelectItem>
                    <SelectItem value="url">URL</SelectItem>
                    <SelectItem value="image">Image</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <label className="text-sm font-medium mb-2 block">
                  Default Value
                </label>
                <Input
                  value={editingVariable.defaultValue || ''}
                  onChange={(e) =>
                    setEditingVariable({
                      ...editingVariable,
                      defaultValue: e.target.value,
                    })
                  }
                />
              </div>

              <div>
                <label className="text-sm font-medium mb-2 block">
                  Description
                </label>
                <Input
                  value={editingVariable.description || ''}
                  onChange={(e) =>
                    setEditingVariable({
                      ...editingVariable,
                      description: e.target.value,
                    })
                  }
                />
              </div>
            </div>

            <DialogFooter>
              <Button
                variant="outline"
                onClick={() => setEditingVariable(null)}
              >
                Cancel
              </Button>
              <Button onClick={() => handleUpdateVariable(editingVariable)}>
                Save Changes
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      )}
    </Dialog>
  );
}
